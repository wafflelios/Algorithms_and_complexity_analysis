'''
2.3. Дорога в институт

Ограничение времени: 0.2 секунд
Ограничение памяти: 8.0 Мб
Ввод стандартный ввод или input.txt
Вывод стандартный вывод или output.txt

Чтобы помешать появлению преподавателя на контрольной, студенты до ночи доставали его вопросами и просьбами, из-за этого преподаватель проспал. 
Однако, однако он всё ещё может успеть, для этого надо быстро дохать до института. Как известно, преподаватель живёт за городом, а институт находится в городе.
1. Преподаватель живёт в точке с координатами (0,1).
2. Институт находятся в точке с координатами (1,0).
3. Граница города − горизонтальная прямая y=a, где a — некоторое число (0<a<1).
4. Скорость передвижения преподавателя за городом составляет V_o, скорость передвижения в городе — V_s. Вдоль границы можно двигаться как по городу, так и за городом.
Студенты хотят узнать, сколько времени у них осталось до приезда преподавателя, что бы понять можно ли идти домой.
Они попросили вас выяснить, в какой точке преподаватель должен заехать в город, чтобы доехать до института как можно быстрее.

Описание входных данных
В первой строке входного файла содератся два положительных целых числа V_o и V_s (1 <= V_o, V_s <= 10 ** 5). Во второй строке содержится процент площади, в квадрате: 
(0, 0) (0, 1) (1, 1) (1, 0), которая не занята городов, S (0 < S < 100)

Описание выходных данных
В единственной строке выходного файла выведите вещественное число с точностью 6 знаков после запятой - координата по оси O_x точки, 
в которой преподаватель должен заехать в город.

Формат ввода
5 3
60

Формат вывода
0.783311
'''

import math

v_outside, v_inside = map(int, input().split())
s_not_city = int(input())


def get_time(middle):
    time_outside = math.sqrt(pow(middle, 2) + pow(s_not_city / 100, 2)) / v_outside
    time_inside = math.sqrt(pow(1 - middle, 2) + pow(1 - s_not_city / 100, 2)) / v_inside
    return time_outside + time_inside


begin, end = 0, 1
while end - begin > 10 ** -7:
    middle_b = begin + (end - begin) / 3
    middle_e = end - (end - begin) / 3
    if get_time(middle_b) < get_time(middle_e):
        end = middle_e
    else:
        begin = middle_b
print('%.6f' % begin)
